include(${CMAKE_CURRENT_LIST_DIR}/checks.cmake)
magick_check_env()

include(${CMAKE_CURRENT_LIST_DIR}/parse_version.cmake)

# TODO
set(VERSION "")
set(MAGICK_TARGET_CPU "")
set(MAGICK_TARGET_OS "")
set(MAGICK_TARGET_VENDOR "")
set(PACKAGE "")
set(PACKAGE_BUGREPORT "")
set(PACKAGE_STRING "")
set(PACKAGE_TARNAME "")
set(PACKAGE_URL "")
set(PACKAGE_VERSION "")

# Set if pipe (|) is enabled on filenames
# TODO Add linux and mac os X
# TODO maybe this would be better with a test somehow
if(WIN32)
  set(PIPES_SUPPORT FALSE)
endif()

# Check if we are on AIX, do the _ALL_SOURCE magic
if(AIX)
  set(_ALL_SOURCE 1)
  set(_LARGE_FILES 1)
endif()

# Check if we're on Solaris
IF (SOLARIS)
  set(_POSIX_PTHREAD_SEMANTICS TRUE)
  set(__EXTENSIONS__ TRUE)
  # TODO restrict the system version and check if the define should be these
  set(_UINT32_T uint32_t)
  set(_UINT64_T uint64_t)
  set(_UINT8_T uint8_t)
endif()

# TODO Not sure how to test this, so for now it's disabled
set(_TANDEM_SOURCE FALSE)

# TODO check if this is supposed to be any of the ones defined https://cmake.org/cmake/help/v3.0/module/FindX11.html
set(X11_CONFIGURE_PATH "")

# TODO should this be an option ??
set(X_DISPLAY_MISSING 1)

# TODO does this suffice?
if(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR MINGW)
  set(_FILE_OFFSET_BITS 64)
  set(_LARGEFILE_SOURCE 1)
else()
  # Not sure on Windows if code is made to work with 64 bits
  set(_FILE_OFFSET_BITS 32)
endif()

# Disable run-time bounds-checking
set(_FORTIFY_SOURCE FALSE)

####### PATHS #######
# TODO Configure these correctly
set(CODER_DIRNAME "")
set(CONFIGURE_PATH "")
set(CONFIGURE_RELATIVE_PATH "ImageMagick-7")
set(DOCUMENTATION_PATH "")
set(EXECUTABLE_PATH "")
set(FILTER_DIRNAME "")
set(INCLUDEARCH_PATH "")
set(INCLUDE_PATH "")
set(INSTALLED_SUPPORT "")
set(LIBRARY_PATH "ImageMagick-7")
set(LIBRARY_RELATIVE_PATH "ImageMagick-7")
set(LIB_BIN_BASEDIRNAME "")
set(SHAREARCH_BASEDIRNAME "")
set(SHAREARCH_DIRNAME "")
set(SHARE_PATH "")
set(SHARE_RELATIVE_PATH "ImageMagick-7")
set(MODULES_BASEDIRNAME "")
set(MODULES_DIRNAME "")
set(LT_OBJDIR "")

# Set the default font search path
if(WIN32)
  set(MAGICK_FONT_PATH "$ENV{WINDIR}\\FONTS\\")
  # Escape the path C way where '\' must be '\\' (regex and cmake also escapes '\' so to find one we need '\\\\')
  string(REGEX REPLACE "\\\\" "\\\\\\\\" MAGICK_FONT_PATH ${MAGICK_FONT_PATH})
elseif(UNIX AND NOT APPLE)
  set(MAGICK_FONT_PATH "/usr/share/fonts/")
elseif(APPLE)
  set(MAGICK_FONT_PATH "/System/Library/Fonts/")
endif()

# Set the version.h file path to be autogenerated
configure_file(${CMAKE_SOURCE_DIR}/MagickCore/version.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/version.h)


if(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 8)
  set(MagickQuantumDepth "Q8")
elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 16)
  set(MagickQuantumDepth "Q16")
elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 32)
  set(MagickQuantumDepth "Q32")
elseif(${MAGICKCORE_QUANTUM_DEPTH} EQUAL 64)
  set(MagickQuantumDepth "Q64")
else()
  set(MagickQuantumDepth "Q?")
endif()

# rc files are only used on Windows binaries
if(WIN32)
  set(MagickLibVersionNumber ${MAGICK_LIB_VERSION_NUMBER})
  set(MagickLibVersionText ${MAGICK_LIB_VERSION_TEXT})

  if(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
    set(MagickPlatform "x86")
  elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    set(MagickPlatform "x64")
  else()
    set(MagickPlatform ${MAGICK_TARGET_CPU})
  endif()

  # Read the version.h file so we can get some needed values using regex
  file(READ ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/version.h CONTENT_VERSION_H)

  # Try to find `MagickCopyright'
  string(REGEX MATCH "\n#define +MagickCopyright +\"([^\"]+)\"\n" FOUND_MAGICK_COPYRIGHT ${CONTENT_VERSION_H})
  if(FOUND_MAGICK_COPYRIGHT)
    set(MagickCopyright \"${CMAKE_MATCH_1}\")
  endif()

  # Try to find `MagickAuthoritativeURL'
  string(REGEX MATCH "\n#define +MagickAuthoritativeURL +\"([^\"]+)\"\n" FOUND_MAGICK_AUTHORITATIVE_URL ${CONTENT_VERSION_H})
  if(FOUND_MAGICK_AUTHORITATIVE_URL)
    set(MagickAuthoritativeURL ${CMAKE_MATCH_1})
  endif()

  set(MagickVersion "${PACKAGE_NAME} ${MAGICK_LIB_VERSION_TEXT}${PACKAGE_VERSION_ADDENDUM} ${MagickQuantumDepth} ${MagickPlatform} ${PACKAGE_RELEASE_DATE} ${MagickAuthoritativeURL}")

  # Set the ImageMagick.rc file path to be autogenerated
  set(MAGICK_RESOURCE_FILE_PATH ${CMAKE_CURRENT_BINARY_DIR}/config/resources/ImageMagick.rc)
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/ImageMagick.rc.cmake ${MAGICK_RESOURCE_FILE_PATH})
  # Copy only the needed resource files to output directory
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/images/ImageMagick.ico ${CMAKE_CURRENT_BINARY_DIR}/images/ImageMagick.ico COPYONLY)
endif()

# Before making the config.h we still need to do somethings
set(PACKAGE_NAME ${PACKAGE_NAME})

# Set the config.h file path to be autogenerated
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config/config.h)

# Now we need to read its content to generate the magick-baseconfig.h header
file(READ ${CMAKE_CURRENT_BINARY_DIR}/config/config.h CONTENT_CONFIG_H)

# Now we need to Regex Replace some things in the header file
# All caps defines will be prefixed with a macro MAGICKCORE_
string(REGEX REPLACE
    "\\*\\/\n#define +([A-Z0-9_]+) *([a-zA-Z0-9\":\\\-]*)\n"
    "*/\n#ifndef MAGICKCORE_\\1\n#define MAGICKCORE_\\1 \\2\n#endif\n"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# All uncaps defines will be prefixed with a macro _magickcore_
string(REGEX REPLACE
    "\\*\\/\n#define +([a-z0-9_]+) *([a-zA-Z0-9 \"_]*)\n"
    "*/\n#ifndef _magickcore_\\1\n#define _magickcore_\\1 \\2\n#endif\n"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# For some reason (I can't seem to find the logic) there's some defines we need to remove the prefix
string(REGEX REPLACE
    "_magickcore___func__"
    "__func__"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# Also for ssize_t we need to typedef instead of define or else magick++ will not compile
string(REGEX REPLACE
    "#ifndef _magickcore_ssize_t\n#define _magickcore_ssize_t ([a-zA-Z ]*)\n#endif"
    "typedef \\1 ssize_t;"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)

# Now we need to append things to the previously read file content
set(CONTENT_CONFIG_H
    "#ifndef _MAGICKCORE_MAGICK_BASECONFIG_H
#define _MAGICKCORE_MAGICK_BASECONFIG_H 1

/* MagickCore/magick-baseconfig.h. Generated automatically at end of configure. */
/* config/config.h.  Generated from config.h.cmake by CMake.  */
${CONTENT_CONFIG_H}

/* once: _MAGICKCORE_MAGICK_BASECONFIG_H */
#endif
"
)

# Create the magick-baseconfig.h file
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/magick-baseconfig.h "${CONTENT_CONFIG_H}")

if(ZERO_CONFIGURATION_SUPPORT)
  file(READ ${CMAKE_CURRENT_SOURCE_DIR}/config/thresholds.xml THRESHOLD_XML)
  # Convert xml file to header
  string(REPLACE "\"" "\\\"" THRESHOLD_XML "${THRESHOLD_XML}")
  string(REGEX REPLACE "\n" "\"\n    \"" THRESHOLD_XML "${THRESHOLD_XML}")
  set(THRESHOLD_H "static const char *const\n  BuiltinMap=\n    \"${THRESHOLD_XML}")
  string(LENGTH ${THRESHOLD_H} THRESHOLD_H_LEN)
  math(EXPR THRESHOLD_H_LEN "${THRESHOLD_H_LEN} - 6")
  string(SUBSTRING ${THRESHOLD_H} 0 ${THRESHOLD_H_LEN} THRESHOLD_H)
  set(THRESHOLD_H "${THRESHOLD_H};\n")
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/MagickCore/threshold-map.h "${THRESHOLD_H}")
endif()