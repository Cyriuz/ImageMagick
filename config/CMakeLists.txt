#  Copyright 1999 ImageMagick Studio LLC, a non-profit organization
#  dedicated to making software imaging solutions freely available.
#
#  You may not use this file except in compliance with the License.  You may
#  obtain a copy of the License at
#
#    https://imagemagick.org/script/license.php
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# Fetch some needed values from version.sh and fill the correspondent variables

if(WIN32)
  # Set the ImageMagick.rc file path to be autogenerated
  set(MAGICK_RESOURCE_FILE_PATH ${CMAKE_BINARY_DIR}/config/resources/ImageMagick.rc)
  configure_file(${CMAKE_SOURCE_DIR}/config/ImageMagick.rc.cmake ${MAGICK_RESOURCE_FILE_PATH})
  # Copy only the needed resource files to output directory
  configure_file(${CMAKE_SOURCE_DIR}/images/ImageMagick.ico ${CMAKE_BINARY_DIR}/images/ImageMagick.ico COPYONLY)
endif()

# Set the version.h file path to be autogenerated
configure_file(${CMAKE_SOURCE_DIR}/MagickCore/version.h.in ${CMAKE_BINARY_DIR}/MagickCore/version.h)

# Set the config.h file path to be autogenerated
configure_file(${CMAKE_SOURCE_DIR}/config/config.h.cmake ${CMAKE_BINARY_DIR}/config/config.h)

# Now we need to read its content to generate the magick-baseconfig.h header
file(READ ${CMAKE_BINARY_DIR}/config/config.h CONTENT_CONFIG_H)

# Now we need to Regex Replace some things in the header file
# All caps defines will be prefixed with a macro MAGICKCORE_
string(REGEX REPLACE
    "\\*\\/\n#define +([A-Z0-9_]+) *([a-zA-Z0-9\":\\\-]*)\n"
    "*/\n#ifndef MAGICKCORE_\\1\n#define MAGICKCORE_\\1 \\2\n#endif\n"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# All uncaps defines will be prefixed with a macro _magickcore_
string(REGEX REPLACE
    "\\*\\/\n#define +([a-z0-9_]+) *([a-zA-Z0-9 \"_]*)\n"
    "*/\n#ifndef _magickcore_\\1\n#define _magickcore_\\1 \\2\n#endif\n"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# For some reason (I can't seem to find the logic) there's some defines we need to remove the prefix
string(REGEX REPLACE
    "_magickcore___func__"
    "__func__"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)
# Also for ssize_t we need to typedef instead of define or else magick++ will not compile
string(REGEX REPLACE
    "#ifndef _magickcore_ssize_t\n#define _magickcore_ssize_t ([a-zA-Z ]*)\n#endif"
    "typedef \\1 ssize_t;"
    CONTENT_CONFIG_H ${CONTENT_CONFIG_H}
)

# Now we need to append things to the previously read file content
set(CONTENT_CONFIG_H
    "#ifndef _MAGICKCORE_MAGICK_BASECONFIG_H
#define _MAGICKCORE_MAGICK_BASECONFIG_H 1

/* MagickCore/magick-baseconfig.h. Generated automatically at end of configure. */
/* config/config.h.  Generated from config.h.cmake by CMake.  */
${CONTENT_CONFIG_H}

/* once: _MAGICKCORE_MAGICK_BASECONFIG_H */
#endif
"
)

# Create the magick-baseconfig.h file
file(WRITE ${CMAKE_BINARY_DIR}/MagickCore/magick-baseconfig.h "${CONTENT_CONFIG_H}")

if(ZERO_CONFIGURATION_SUPPORT)
  file(READ ${CMAKE_SOURCE_DIR}/config/thresholds.xml THRESHOLD_XML)
  # Convert xml file to header
  string(REPLACE "\"" "\\\"" THRESHOLD_XML "${THRESHOLD_XML}")
  string(REGEX REPLACE "\n" "\"\n    \"" THRESHOLD_XML "${THRESHOLD_XML}")
  set(THRESHOLD_H "static const char *const\n  BuiltinMap=\n    \"${THRESHOLD_XML}")
  string(LENGTH ${THRESHOLD_H} THRESHOLD_H_LEN)
  math(EXPR THRESHOLD_H_LEN "${THRESHOLD_H_LEN} - 6")
  string(SUBSTRING ${THRESHOLD_H} 0 ${THRESHOLD_H_LEN} THRESHOLD_H)
  set(THRESHOLD_H "${THRESHOLD_H};\n")
  file(WRITE ${CMAKE_BINARY_DIR}/MagickCore/threshold-map.h "${THRESHOLD_H}")
endif()

configure_file(policy-${SECURITY_POLICY}.xml ${CMAKE_CURRENT_BINARY_DIR}/policy.xml COPYONLY)

configure_file(configure.xml.in ${CMAKE_CURRENT_BINARY_DIR}/configure.xml @ONLY)
configure_file(delegates.xml.in ${CMAKE_CURRENT_BINARY_DIR}/delegates.xml @ONLY)
configure_file(type-apple.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type-apple.xml @ONLY)
configure_file(type-dejavu.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type-dejavu.xml @ONLY)
configure_file(type-ghostscript.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type-ghostscript.xml @ONLY)
configure_file(type-urw-base35.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type-urw-base35.xml @ONLY)
configure_file(type-windows.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type-windows.xml @ONLY)
configure_file(type.xml.in ${CMAKE_CURRENT_BINARY_DIR}/type.xml @ONLY)

file(COPY
    english.xml
    francais.xml
    locale.xml
    colors.xml
    log.xml
    mime.xml
    quantization-table.xml
    thresholds.xml
    DESTINATION ${CMAKE_CURRENT_BINARY_DIR}
)

set(DATA_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/english.xml
    ${CMAKE_CURRENT_BINARY_DIR}/francais.xml
    ${CMAKE_CURRENT_BINARY_DIR}/locale.xml
)
set(PLATFORM_DATA_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/configure.xml
)

set(CONFIG_FILES
    ${CMAKE_CURRENT_BINARY_DIR}/colors.xml
    ${CMAKE_CURRENT_BINARY_DIR}/delegates.xml
    ${CMAKE_CURRENT_BINARY_DIR}/log.xml
    ${CMAKE_CURRENT_BINARY_DIR}/mime.xml
    ${CMAKE_CURRENT_BINARY_DIR}/policy.xml
    ${CMAKE_CURRENT_BINARY_DIR}/quantization-table.xml
    ${CMAKE_CURRENT_BINARY_DIR}/thresholds.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type-apple.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type-dejavu.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type-ghostscript.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type-urw-base35.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type-windows.xml
    ${CMAKE_CURRENT_BINARY_DIR}/type.xml
)

install(FILES ${DATA_FILES} DESTINATION ${SHARE_PATH})
install(FILES ${PLATFORM_DATA_FILES} DESTINATION ${SHAREARCH_PATH})
install(FILES ${CONFIG_FILES} DESTINATION ${CONFIGURE_PATH})
